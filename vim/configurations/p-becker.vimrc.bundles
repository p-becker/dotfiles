if &compatible
  set nocompatible
end

call plug#begin(expand(fnameescape(g:home_path)).'/.vim/bundle')

" Define bundles via Github repos
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'tpope/vim-surround'

Plug 'w0rp/ale'

Plug 'janko-m/vim-test'

Plug 'tpope/vim-fugitive'

Plug 'tpope/vim-unimpaired'

Plug 'scrooloose/nerdcommenter'

Plug 'KeitaNakamura/neodark.vim'

Plug 'vim-airline/vim-airline'

Plug 'maxbrunsfeld/vim-yankstack'
Plug 'tpope/vim-repeat'

Plug 'Shougo/denite.nvim'

Plug 'ap/vim-css-color'

Plug 'andreshazard/vim-freemarker'

Plug 'airblade/vim-localorie'

Plug 'junegunn/vim-peekaboo'

Plug 'machakann/vim-highlightedyank'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let deoplete_config = expand(fnameescape(dotfiles_path)."/vim/configurations/p-becker.deoplete.vim")
if filereadable(deoplete_config)
  exec "source " . g:deoplete_config
end

" search count
Plug 'osyo-manga/vim-anzu'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsSnippetsDir = "~/.vim/bundle/vim-snippets/snippets"

Plug 'OmniSharp/omnisharp-vim'

Plug 'OrangeT/vim-csharp'

"Plug 'uarun/vim-protobuf'
"Plug 'uber/prototool', { 'rtp':'vim/prototool' }
call plug#end()
